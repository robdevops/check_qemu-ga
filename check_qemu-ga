#!/bin/bash
set -euo pipefail
IGNORED_DOMAINS=("")


[[ ! -x $( which virsh ) ]] && printf "virsh not found in PATH.\n\n" >&2 && exit 3
[[ ! $( whoami ) == 'root' ]] && printf "must run as root.\n\n" >&2 && exit 3

while getopts ":hi:" opt; do
	case $opt in
	  i  ) IFS=';' read -r -a IGNORED_DOMAINS <<< "$OPTARG" ;;
	  :  ) error "Option -$OPTARG requires an argument." ;;
	  \? ) error "Invalid option: -$OPTARG" ;;
	  h  ) printf "Checks if qemu-agent guest-ping is responding. Run with sudo.\nUsage: $( basename $0 ) [-i '<IGNORED VMs>']\nIgnored VMs should be semicolon separated.\n\n" >&2 && exit 3 ;;
	  *  ) usage ;;
	esac
done

pingable() {
	virsh qemu-agent-command --domain $DOMAIN --cmd '{"execute":"guest-ping"}' > /dev/null 2>&1
	return $?
}

blacklisted() {
	ElementIn "$DOMAIN" "${IGNORED_DOMAINS[@]}"
}

ElementIn() {
	local element match="$1"
	shift
	for element; do
		[[ "$element" == "$match" ]] && return 0

	done
	return 1

}


for DOMAIN in $( virsh list --name ); do
	if ! blacklisted; then
		if pingable; then
			SUCCESSFUL+=( $DOMAIN )

		else
			FAILED+=( $DOMAIN )

		fi

	fi

done

if [[ -v FAILED ]]; then
	echo "WARNING: ${#FAILED[@]} guests not responding: ${FAILED[@]}."
	exit 1

else
	echo "OK: ${#SUCCESSFUL[@]} guests responding: ${SUCCESSFUL[@]}. "
	exit 0

fi

